openapi: 3.0.0
info:
  title: Devices
  version: '1.0'
  description: >-
    <span style="font-size: 3em; color: #5D535E;">
      <i class="fas fa-robot fa-2x"></i> <i>CloudHome
    </i></span> 

    </br>

    </br>


    Interact with the `'Devices'` API to get a list of registered devices, add
    or remove devices, and to update existing records.


    Use this API to leverage _*CloudHome*__'s central repository of devices that
    allow's users to manage automation systems at home, at work or on the go.



    ```bash

    curl --request GET \
      --url 'https://cloudhome.io/api/devices/abc?spaceid=all&sort=desc&limit=10' \
      --header 'apikey: 123' \
      --header 'deviceid: all'
    ```


    ![droids](https://github.com/stephenlprice/CloudHome/blob/master/assets/images/droids.png?raw=true)
  contact:
    name: Stephen Price
    email: api@cloudhome.io
    url: cloudhome.io
  termsOfService: cloudhome.io/api/devices/terms
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
servers:
  - url: 'https://cloudhome.io'
    description: CloudHome device platform
  - description: ''
    url: 'https://cloudhome.io/v1'
  - url: 'https://staging.cloudhome.io/v1'
    description: ''
paths:
  '/api/devices/{accountid}':
    get:
      summary: listDevices
      tags:
        - Devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: &ref_2
                  title: Device
                  type: object
                  x-tags:
                    - devices
                    - IOT
                  description: >-
                    Describes a device activated on a **CloudHome** account.
                    Each class can contain more than one device and location,
                    centrally managed by the CloudHome service cloud.
                  x-examples:
                    devices:
                      - deviceID: '123'
                        deviceName: frontDoorLock
                        deviceClass: safety
                        spaceID: home
                        alexaCompatible: true
                        storageUsed: 0.003
                        storageFree: 1
                      - deviceID: '456'
                        deviceName: thermostat
                        deviceClass: comfort
                        spaceID: home
                        alexaCompatible: true
                        storageUsed: 0.025
                        storageFree: 1
                      - deviceID: '789'
                        deviceName: sprinkler
                        deviceClass: convenience
                        spaceID: yard
                        alexaCompatible: false
                        storageUsed: 0.0018
                        storageFree: 1
                    device:
                      - deviceID: abc
                        deviceName: welcomeDroid
                        deviceClass: commercial
                        spaceID: office
                        alexaCompatible: true
                        storageUsed: 137
                        storageFree: 300
                  properties:
                    deviceID:
                      type: string
                      description: generated by the backend
                    deviceName:
                      type: string
                      description: user generated name
                    deviceClass:
                      type: string
                    spaceID:
                      type: string
                    alexaCompatible:
                      type: boolean
                    storageUsed:
                      type: number
                      description: >
                        in gigabytes as described in this [data measurement
                        chart](http://www.wu.ece.ufl.edu/links/dataRate/DataMeasurementChart.html)
                    storageFree:
                      type: number
                      description: >-
                        in gigabytes as described in this [data measurement
                        chart](http://www.wu.ece.ufl.edu/links/dataRate/DataMeasurementChart.html)
                    dateCreated:
                      type: string
                      format: date-time
                      example: '2017-07-21T17:32:28Z'
                    dateUpdated:
                      type: string
                      format: date-time
                      example: '2017-07-21T17:32:28Z'
                  required:
                    - deviceName
              examples:
                devices:
                  value:
                    - deviceID: '123'
                      deviceName: frontDoorLock
                      deviceClass: safety
                      spaceID: home
                      alexaCompatible: true
                      storageUsed: 0.003
                      storageFree: 1
                      dateCreated: '2017-05-21T20:34:25+42:01'
                      dateUpdated: '2018-01-29T20:36:30+00:00'
                    - deviceID: '456'
                      deviceName: thermostat
                      deviceClass: comfort
                      spaceID: home
                      alexaCompatible: true
                      storageUsed: 0.025
                      storageFree: 1
                      dateCreated: '2019-07-20T15:27:32+18:21'
                      dateUpdated: '2020-03-01T22:13:24+00:03'
                    - deviceID: '789'
                      deviceName: sprinkler
                      deviceClass: convenience
                      spaceID: yard
                      alexaCompatible: false
                      storageUsed: 0.0018
                      storageFree: 1
                      dateCreated: '2020-06-18T11:23:29+44:12'
                      dateUpdated: '2020-06-18T11:23:29+44:12'
                device:
                  value:
                    - deviceID: abc
                      deviceName: welcomeDroid
                      deviceClass: commercial
                      spaceID: office
                      alexaCompatible: true
                      storageUsed: 137
                      storageFree: 300
                      dateCreated: '2019-07-20T15:27:32+18:21'
                      dateUpdated: '2020-03-01T22:13:24+00:03'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: &ref_0
                title: Response Status
                type: object
                x-tags:
                  - IOT
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                    description: >-
                      status code as defined by the [Hypertext Transfer Protocol
                      (HTTP) Status Code
                      Registry](https://www.ietf.org/assignments/http-status-codes/http-status-codes.xml)
                  message:
                    type: string
                    example: Not Found
                    description: >-
                      status code description as defined by the [Hypertext
                      Transfer Protocol (HTTP) Status Code
                      Registry](https://www.ietf.org/assignments/http-status-codes/http-status-codes.xml)
                required:
                  - code
                  - message
                description: Generic status response schema for successful requests.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_0
        '403':
          description: Forbidden
          content:
            application/json:
              schema: *ref_0
        '404':
          description: Not Found
          content:
            application/json:
              schema: *ref_0
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: *ref_0
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema: *ref_0
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema: *ref_0
        default:
          description: Error
          content:
            application/json:
              schema: *ref_0
      operationId: get-api-devices
      description: >-
        <span style="font-size: 1.5em; color: #5D535E;">
          <i class="fas fa-robot fa-xs"></i> listDevices
        </span>


        Returns a list of devices for an account at a given space (or all spaces
        if using the default value `'all'`). A valid `'CloudHome Key'` is
        required to authenticate, users must also specify their `'accountid'`
        when requesting devices. The response can be further defined by limiting
        the number of results or sorting them as required.


        If specific devices are desired, users can specify the `'deviceid'` or
        multiple thereof values in the header.


        More information about required parameters and authentication can be
        seen below.


        ```bash

        curl --request GET \
          --url 'https://cloudhome.io/api/devices/abc?spaceid=all&sort=desc&limit=10' \
          --header 'apikey: 123' \
          --header 'deviceid: all'
        ```
      parameters:
        - &ref_1
          schema:
            type: string
            example: seattle-office
            default: all
          in: query
          name: spaceid
          description: >-
            location associated with the devices (see `'My Spaces'` for more
            information)
          allowEmptyValue: true
        - &ref_5
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
            example: asc
          in: query
          name: sort
          allowEmptyValue: true
          description: will sort objects returned from the request
        - &ref_6
          schema:
            type: integer
            default: 10
            format: int32
            example: 15
            maximum: 25
            minimum: 1
          in: query
          name: limit
          allowEmptyValue: true
          description: specify the number of results returned from the request
        - &ref_3
          schema:
            type: string
            default: all
            example: 123abc
          in: header
          name: Deviceid
          description: >-
            unique identifiers for devices registered on the service cloud, when
            empty it defaults to `'all'`
          allowEmptyValue: true
          required: true
    post:
      summary: newDevice
      tags:
        - Devices
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: *ref_0
              examples:
                Created:
                  value:
                    code: 201
                    message: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema: *ref_0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_0
        '403':
          description: Forbidden
          content:
            application/json:
              schema: *ref_0
        '404':
          description: Not Found
          content:
            application/json:
              schema: *ref_0
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: *ref_0
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema: *ref_0
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema: *ref_0
        default:
          description: Error
          content:
            application/json:
              schema: *ref_0
      operationId: post-api-devices
      description: >-
        <span style="font-size: 1.5em; color: #5D535E;">
          <i class="fas fa-robot fa-xs"></i> newDevice
        </span>


        Add new devices to the CloudHome service cloud. A valid `'CloudHome
        Key'` is required to authenticate, users must also specify their
        `'accountid'` when posting new devices. Users are limited to posting
        _**10 devices per request**_, further quantities of devices must be
        paginated.


        More information about required parameters and authentication can be
        seen below.
      parameters:
        - *ref_1
        - &ref_4
          schema:
            type: string
            default: newDevice
            example: garageCamera
          in: header
          name: Device-Name
          description: >-
            devices in the same space require unique names or will be assigned
            the default name `'newDevice'`
          allowEmptyValue: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items: *ref_2
        description: >-
          The only required field to add a new device is `'deviceName'`, however
          if left empty it will default to `'newDevice'`. CloudHome assigns
          unique identifiers (`'deviceID'`) without user intervention.
          Additional information can be  updated by the user either through the
          service cloud interface or but using the `'PUT'` operation for this
          endpoint.
    put:
      summary: updateDevice
      tags:
        - Devices
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: *ref_0
        '400':
          description: Bad Request
          content:
            application/json:
              schema: *ref_0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_0
        '403':
          description: Forbidden
          content:
            application/json:
              schema: *ref_0
        '404':
          description: Not Found
          content:
            application/json:
              schema: *ref_0
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: *ref_0
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema: *ref_0
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema: *ref_0
        default:
          description: Error
          content:
            application/json:
              schema: *ref_0
      operationId: put-api-devices
      description: >-
        <span style="font-size: 1.5em; color: #5D535E;">
          <i class="fas fa-robot fa-xs"></i> updateDevice
        </span>


        Update information for existing devices registerd on the CloudHome
        service cloud. A valid `'CloudHome Key'` is required to authenticate,
        users must also specify their `'accountid'` when updating device data.
        Users are limited to updating _**1 device per request**_ by specifying a
        `'deviceid'`, further device updates must be paginated.


        More information about required parameters and authentication can be
        seen below.
      parameters:
        - *ref_3
        - *ref_1
      requestBody:
        content:
          application/xml:
            schema: *ref_2
        description: >-
          Beside the fields the user wishes to update, the only field required
          by this operation is `'deviceid'`, however if left empty it will
          default to `'all'`. Such a request will result in error code `'400 Bad
          Request'` as this operation only allows updating one device per
          request.
    delete:
      summary: removeDevice
      tags:
        - Devices
        - IOT
      operationId: delete-api-devices
      description: >-
        <span style="font-size: 1.5em; color: #5D535E;">
          <i class="fas fa-robot fa-xs"></i> removeDevice
        </span>


        Delete devices registerd on the CloudHome service cloud. A valid
        `'CloudHome Key'` is required to authenticate, users must also specify
        their `'accountid'` when deleting devices. Users are limited to deleting
        _**1 device per request**_ by specifying a `'deviceid'`, further device
        removal must be paginated.


        More information about required parameters and authentication can be
        seen below.


        ```bash

        curl --request DELETE \
          --url 'https://cloudhome.io/api/devices/abc?spaceid=all' \
          --header 'apikey: 123' \
          --header 'deviceid: all'
        ```


        The only field required by this operation is `'deviceid'`, however if
        left empty it will default to `'all'`. Such a request will result in
        error code `'400 Bad Request'` as this operation only allows deleting
        one device per request.
      parameters:
        - *ref_3
        - *ref_1
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: *ref_0
        '400':
          description: Bad Request
          content:
            application/json:
              schema: *ref_0
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: *ref_0
        '403':
          description: Forbidden
          content:
            application/json:
              schema: *ref_0
        '404':
          description: Not Found
          content:
            application/json:
              schema: *ref_0
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema: *ref_0
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema: *ref_0
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema: *ref_0
    parameters:
      - schema:
          type: string
          example: jetsonsFutureHome
        name: accountid
        in: path
        required: true
        description: unique per account (see `'My Account'` for more information)
components:
  schemas: {}
  parameters:
    accountid:
      schema:
        type: string
        example: jetsonsFutureHome
      name: accountid
      in: path
      required: true
      description: unique per account (see `'My Account'` for more information)
    spaceid: *ref_1
    deviceName: *ref_4
    deviceid: *ref_3
    sort: *ref_5
    limit: *ref_6
  securitySchemes:
    CloudHome Key:
      name: apiKey
      type: apiKey
      in: header
      description: >-
        Provided upon account registration (see `'My Account'` for more
        information). API Keys can be used as Basic HTTP Authentication
        credentials and provide a substitute for the account's actual username
        and password. API Keys are only available to team accounts and there is
        only 1 key per account. API Keys do not support scopes and have
        therefore access to all contents of the account.
    HTTP Auth:
      type: http
      scheme: basic
      description: >-
        Basic HTTP Authentication as per
        [RFC-2617](https://tools.ietf.org/html/rfc2617) (Digest not supported).
        Note that Basic Auth with username and password as credentials is only
        available on accounts that have 2-factor-auth / 2-step-verification
        disabled. If you use 2fa, you should authenticate using OAuth2 instead.
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://cloudhome.io/oauth2/authorize'
          tokenUrl: 'https://cloudhome.io/oauth2/token'
          scopes:
            'devices:write': Read and modify your devices
            'locations:write': Read and modify your locations
            'accounts:write': Read and modify your accounts
            'users:write': Read and modify your users
            'devices:delete': Delete your devices
            'locations:delete': Delete your locations
            'users:delete': Delete your users
          refreshUrl: 'https://cloudhome.io/oauth2/refresh'
        implicit:
          authorizationUrl: 'https://cloudhome.io/oauth2/authorize'
          refreshUrl: 'https://cloudhome.io/oauth2/refresh'
          scopes:
            'devices:write': Read and modify your devices
            'locations:write': Read and modify your locations
            'accounts:write': Read and modify your accounts
            'users:write': Read and modify your users
            'devices:delete': Delete your devices
            'locations:delete': Delete your locations
            'users:delete': Delete your users
      description: >-
        OAuth 2 as per [RFC-6749](https://tools.ietf.org/html/rfc6749). OAuth2
        is a protocol that lets external apps request authorization to private
        details in a user's CloudHome account without getting their password.
        This is preferred over Basic Authentication because tokens can be
        limited to specific types of data, and can be revoked by users at any
        time.
    OpenID Connect:
      type: openIdConnect
      openIdConnectUrl: 'https://cloudhome.io/auth/openid-configuration'
      description: ''
security:
  - CloudHome Key: []
tags:
  - name: Devices
    description: relative to device management
    externalDocs:
      url: 'https://cloudhome.io/api/tags/devices'
  - name: IOT
    description: relative to devices and the 'internet of things'
    externalDocs:
      url: 'https://cloudhome.io/api/tags/IOT'